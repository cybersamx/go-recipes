package main

import (
	"crypto/tls"
	"crypto/x509"
	"database/sql"
	"errors"
	"fmt"
	"os"

	"github.com/go-sql-driver/mysql"
)

func newTLSConfig() (*tls.Config, error) {
	// CA
	rootCerts := x509.NewCertPool()
	caFile, err := os.ReadFile("docker/tls/ca.pem")
	if err != nil {
		return nil, err
	}
	if ok := rootCerts.AppendCertsFromPEM(caFile); !ok {
		return nil, errors.New("can't append ca file")
	}

	// Client cert and key.
	certPath := "docker/tls/client-cert.pem"
	keyPath := "docker/tls/client-key.pem"
	clientCert, err := tls.LoadX509KeyPair(certPath, keyPath)
	if err != nil {
		return nil, errors.New("can't load client cert and key")
	}

	cfg := tls.Config{
		RootCAs:      rootCerts,
		Certificates: []tls.Certificate{clientCert},
		// Because we are using self-signed certs generated by mysql_ssl_rsa_setup,
		// which doesn't contain the server name as the common value, we need set
		// InsecureSkipVerify to true. The certs will still be verified but the hostname
		// verification will be skipped.
		// See https://dev.mysql.com/doc/refman/5.7/en/using-encrypted-connections.html
		InsecureSkipVerify: true,
	}

	return &cfg, nil
}

func noTLSConnect() (*sql.DB, error) {
	db, err := sql.Open("mysql", "mysql:password@tcp(localhost:3306)/db")
	if err != nil {
		return nil, err
	}

	err = db.Ping()
	if err != nil {
		return nil, err
	}

	return db, nil
}

func tlsConnect() (*sql.DB, error) {
	const tlsKey = "my-setup"

	// Let's connect to mysql using tls.
	cfg, err := newTLSConfig()
	if err != nil {
		return nil, err
	}

	if err := mysql.RegisterTLSConfig(tlsKey, cfg); err != nil {
		return nil, err
	}

	db, err := sql.Open("mysql", "mysql:password@tcp(localhost:3306)/db?tls="+tlsKey)
	if err != nil {
		return nil, err
	}

	err = db.Ping()
	if err != nil {
		return nil, err
	}

	return db, nil
}

func main() {
	db, err := noTLSConnect()
	if err != nil {
		fmt.Println("This error is expected - need to connect to mysql using tls")
	}
	defer func() {
		if db != nil {
			db.Close()
		}
	}()

	tdb, err := tlsConnect()
	if err != nil {
		panic(err)
	}
	defer func() {
		if tdb != nil {
			tdb.Close()
		}
	}()

	fmt.Println("Successfully connected to mysql using tls")
}
